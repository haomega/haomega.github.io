<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Categories on 阿豪</title>
    <link>http://haomega.github.io/categories/</link>
    <description>Recent content in Categories on 阿豪</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    
	<atom:link href="http://haomega.github.io/categories/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>Java Thread 线程简单概要</title>
      <link>http://haomega.github.io/posts/java-thread-%E7%BA%BF%E7%A8%8B%E7%AE%80%E5%8D%95%E6%A6%82%E8%A6%81/</link>
      <pubDate>Thu, 28 May 2020 23:29:39 +0800</pubDate>
      
      <guid>http://haomega.github.io/posts/java-thread-%E7%BA%BF%E7%A8%8B%E7%AE%80%E5%8D%95%E6%A6%82%E8%A6%81/</guid>
      <description>Java中的线程模型 Java是以同步/阻塞的方式运行的，他会一行一行执行。
为什么需要多线程 CPU的速度太快了，快到要等待其他操作执行，为了不让CPU的时间浪费在白白等待上就要利用多线程技术。
先来看看CPU和其他速度的差距
以我们目前常见的CPU规格为例：四核八线程核心频率2.6GHz（这里的八线程意思是超线程与本文的线程不同）
可以理解为它有四个物理大脑（由于超线程的原因，每个物理核心可以虚拟出两个逻辑核心也就是4核可以虚拟出8核）
每个核心每秒可以执行2.6 * 10^9个指令，一个指令只需要0.38ns（3.8 * 10^-10秒）；
SSD随机读取耗时大概150us（1.5 * 10^-4）
与之相比时间上相差了10^6倍！！！其他的例如硬盘寻址、文件读写、网络IO等等也都是非常耗时的操作，
由于Java是以阻塞方式运行，比如频繁的IO操作，往往时间都花费在寻址、读写数据上，CPU有很多的空闲时间，这个时候使用多线程技术可以利用CPU空闲的这段时间来干其他的事情，使程序更加高效。总结来说：多线程就是不让CPU闲下来，在有限的时间里干更多的事情
开启线程的方法 开启一个线程的时候，会增加一个独立的栈： Jvm的栈空间中除了Main的栈之外会增加一个与之互相没有关联的栈。
 使用Runnable接口,实现接口后传入Thread；  	new Thread(() -&amp;gt; { System.out.println(&amp;quot; MyThread is:&amp;quot; + Thread.currentThread().getName()); }).start();  继承Thread类，实现方法，然后通过调用start开启线程；  static class MyThread extends Thread { @Override public void run() { System.out.println(&amp;quot; MyThread is:&amp;quot; + this.getName()); } } 线程中共享哪些资源 新的线程执行的内容会在一个新的栈中运行，则只属于栈的局部变量是不可共享的，反之其他的都是共享的，比如堆中的对象。
其实除了局部变量外共享所有资源（对象、静态常量、静态方法·····等等除了局部变量外）。</description>
    </item>
    
    
    
    <item>
      <title>Java Exception简要概述</title>
      <link>http://haomega.github.io/posts/java-exception%E7%AE%80%E8%A6%81%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Thu, 28 May 2020 13:55:18 +0800</pubDate>
      
      <guid>http://haomega.github.io/posts/java-exception%E7%AE%80%E8%A6%81%E6%A6%82%E8%BF%B0/</guid>
      <description>概要 程序并不是每次都能按照理想情况运行，总是有着不可预测的异常情况发生。
作用  正确处理异常可以使程序更健壮； 异常给方法提供了除了return之外的额外的返回途径；  Java中的异常结构 Java中的异常大致分为两类：Exception和Error，他们都继承自Throwable，意思是可抛出的异常;
Exception:(checked) 往往可以通过正确处理来避免；例如NullPointorException * runtimeException：运行时异常（unchecked） Error：（unchecked） 程序无能为力的异常；例如NoSuchClassError、OutOfmemoryError
异常的处理 有两种方式来处理异常
 抛出 捕获  当你的的程序在某些情况不能正确执行：你可以抛出一个异常来警告调用者，或者捕获异常并处理。 当你的程序调用一个抛出异常的接口时： * 继续抛出这个异常 * 捕获并处理它（切记不可捕获了异常时不做任何处理） * 捕获它，doSomething并继续抛出此异常或另一个异常
异常处理原则  能用if/else或者其他能处理的，不要用异常 尽早抛出异常 带出重要信息 一旦捕获异常除非特别的，必须进行处理或者重新抛出。 ····  其他 不捕获，一直抛出会发生什么？ 异常会击穿方法，直到被捕获，如果一直到最外层都没有捕获，则会杀掉当前线程。
catch/finally里的return finally一定会被执行，所以最终return的是finally块里的，另：不要再catch里return，这是不好的做法。
日志里的caused by是什么？ 出现caused by是异常被捕获后，重新由新的异常包裹（throw new XXXException(&amp;ldquo;some things&amp;rdquo;, e)）并抛出。</description>
    </item>
    
    
    
    <item>
      <title>Collection 体系和常用类</title>
      <link>http://haomega.github.io/posts/collection-%E4%BD%93%E7%B3%BB%E5%92%8C%E5%B8%B8%E7%94%A8%E7%B1%BB/</link>
      <pubDate>Tue, 12 May 2020 17:55:28 +0800</pubDate>
      
      <guid>http://haomega.github.io/posts/collection-%E4%BD%93%E7%B3%BB%E5%92%8C%E5%B8%B8%E7%94%A8%E7%B1%BB/</guid>
      <description>Collection体系 Collection：是一组数据的集合
 Set 集 （不包含重复、无序） List 列表 （包含重复、有序) Quene 队列 （先进后出）  Collection接口 定义了基本的集合方法
 add/addAll	添加一个到集合中 remove/removeAll/removeIf	从集合中移除元素 contains/containsAll	判断集合是否包含 size	集合大小 clear	清空集合 retainAll	交集  Set 完全是Collection的实现，没有新增什么方法。
List 增加了基于Index操作的相关方法：
 get(i)/set(i)/remove 根据下标获取/设置/删除 indexOf/lastIndexOf  Quene 增加了队列的相关操作：
 poll/remove 删除头部的一个元素 peek 偷看  常用类 从Collection体系图中可以看出：
 Set：HashSet List：ArrayList Quene：  HashSet 内部维护了一个HashMap，基本上都是在间接操作里面的HashMap
ArrayList 日常用到的最多，如果没有特殊的需求，一般都会用它。 特点是内部维护了数组，查找快、增删慢（如果删除中间的元素，后面的元素还要依次进一） 内部数据结构： Object数组
Map体系 键值对映射，不属于Collection Map接口 定义了键值对操作的方法，内部还包含了Entry接口
 put/putAll 新增键值对 remove 删除 get	根据key获取value containsKey/containsValue 判断包含 clear	清空 keySet/values/entrySet	返回Map的key视图/value视图/entry视图 replace 替换  注意: Map视图是map内的真实映射，对视图操作就是对map操作</description>
    </item>
    
    
    
    <item>
      <title>Java的包管理与Maven</title>
      <link>http://haomega.github.io/posts/java%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86%E4%B8%8Emaven/</link>
      <pubDate>Mon, 11 May 2020 17:30:59 +0800</pubDate>
      
      <guid>http://haomega.github.io/posts/java%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86%E4%B8%8Emaven/</guid>
      <description>Java程序如何执行？ 在Jvm中，它只做很简单的一件事，找到这个类并执行它，如果类中引用了其他的类，则继续找到引用的这个类，继续执行。
Jvm如何找到类？ 在Jvm中，所有的类使用全限定类名，Jvm也是根据全限定类名找到这个类； 查询机制：与熟悉的Path环境变量相同，Jvm从classpath按照Path的顺序依次查找。
当我们引入第三方包时，需要怎么做？ 首先你需要有源文件（jar文件)，然后告诉Jvm去哪里可以找到它，也就是指定classpath。
Maven做了什么？ 在管理依赖的方面，Maven就是从它的仓库中通过你定义的坐标
 &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.12&amp;lt;/version&amp;gt; 找到并下载该jar。
包冲突 根据Jvm执行的机制可以知道，包冲突就是在classpath中存在全限定类名相同的类，我们想要使用的jar包的path排在了不想要的后面，导致了错误的引用。 解决方法也是围绕着能够让Jvm能够正确读取我们想要的类为前提来进行。</description>
    </item>
    
    
    
    <item>
      <title>Hugo and GithubPages 博客搭建</title>
      <link>http://haomega.github.io/posts/hugo-and-githubpages-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Mon, 11 May 2020 11:08:27 +0800</pubDate>
      
      <guid>http://haomega.github.io/posts/hugo-and-githubpages-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid>
      <description>Hugo Go语言实现的博客生成器
 The world&amp;rsquo;s fastest framework for building websites.
 在使用Hugo之前，我使用过hexo，Hugo和其相比，速度是快了不少。当然速度并不是那么重要。
Github Pages 提供了类似静态文件服务的功能，你不必去购买服务器和域名了。
搭建步骤  安装Hugo，下载地址,请下载对应系统版本； 配置Hugo环境变量，终端中执行hugo version 出现版本详情，表示环境变量配置成功； 博客初始化、安装主题、创建post，请查看官网 配置GithubPages  在Gihub上创建 username.github.io的仓库； 执行hugo -D 将会在/public生成静态博客的内容； 我们将/public内容添加remote到第一步的远程仓库，并推送到master； 在仓库的配置页面打开GithubPages；   博客源文件的备份当然，我们也会考虑到，你使用Hugo生成博客的目录可能会丢失， 所以，对当前目录做个备份吧，不仅能备份配置，也能备份生成文章的md源文件。 我的做法是将根目录推送到username.github.io仓库的hugo-source分支，与master分支互不影响。  </description>
    </item>
    
    
    
    <item>
      <title>开博大吉</title>
      <link>http://haomega.github.io/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Fri, 08 May 2020 23:03:02 +0800</pubDate>
      
      <guid>http://haomega.github.io/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      <description>Hello world. </description>
    </item>
    
    
  </channel>
</rss>
