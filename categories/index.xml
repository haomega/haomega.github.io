<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Categories on 阿豪</title>
    <link>http://haomega.github.io/categories/</link>
    <description>Recent content in Categories on 阿豪</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    
	<atom:link href="http://haomega.github.io/categories/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>HTML 起手与常用标签</title>
      <link>http://haomega.github.io/posts/html-%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Thu, 09 Jul 2020 21:41:46 +0800</pubDate>
      
      <guid>http://haomega.github.io/posts/html-%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>概念 WWW：Word Wide Web 万维网，包含URL、HTTP和HTML。
W3C：万维网联盟，主要负责万维网协议的制定。
HTTP=Hyper Text Transfer Protocol 超文本传输协议。
HTML=Hyper Text Markup Lanauage 超文本标记语言。
万维网于1900年由李爵士发明，
常用标签 a Tag 超链接标签，通过&amp;lt;a&amp;gt;标签，网页互相连接，组成了丰富多彩的网络内容形式。
属性 href 网址：
 https://google.com http://google.com //google.com 根据网页协议自动选择协议  路径：
 /a/b或a/b index.html或/index.html 伪协议： javascript:代码;可以执行Javascript代码，通常用于javascript:;不起任何作用。 mailto:邮箱或tel:手机号  id
href=#id 跳转页面的指定id位置
target href中的连接打开位置，比如常用的_blank在新窗口打开。
浏览器内置（window）
 _blank _top _parent _sef 默认选项，本窗口  用户自定义：
 window name iframe name  img Tag 图片标签，img标签会发起HTTP GET请求来加载图片资源。
属性  alt height/width src  事件  onload onerror 图片加载失败是，可以通过这个事件设置一个替换图片。  table Tag 完整的table示例：</description>
    </item>
    
    
    
    <item>
      <title>Java Stream 简介</title>
      <link>http://haomega.github.io/posts/java-stream-%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 07 Jul 2020 15:08:32 +0800</pubDate>
      
      <guid>http://haomega.github.io/posts/java-stream-%E7%AE%80%E4%BB%8B/</guid>
      <description>JDK1.8 Stream is comming! JDK1.8引入了一个新的功能，Stream流操作，通过将Collection、数组等转换成stream，通过stream进行筛选、转换等操作，简直不要太爽。
Stream流操作，主要用于数据处理方面，以前十几行能实现的功能，使用Stream往往只需要一行，Cool！
使用Strema 流的处理包括两个部分: * 一系列的中间操作，比如：过滤、转换等 * 终结操作，将经过一系列中间操作的流进行收集，比如：计算个数、收集为Set/List、分组等等。
注意：一个流在执行终结操作后就会被关闭，是不能够复用的。
生成一个Stream  Collection类，使用Collection.stream()方法。 数组：Arrays.steam(int[] arr)    Stream.of(T &amp;hellip;)通过给定的元素生成， Stream.generate(Supplier T)通过给定的函数接口生成, Stream.empty()空流， Strema.concat(Stream&amp;lt;? extends T&amp;gt; a, Stream&amp;lt;? extends T&amp;gt; b)合并两个流。  除了常规的对象流之外，还有IntStream、LongStream、DoubleStream
中间操作  筛选：filter、limit、skip 映射：map、flatMap 排序：sorted  终结操作  查找与匹配：anyMatch、allMatch、findFirst、findAny 归约：reduce 收集 ：collect(Collector)   collect 是一个非常有用的终端操作，它可以将流中的元素转变成另外一个不同的对象，例如一个List，Set或Map。collect 接受入参为Collector（收集器），它由四个不同的操作组成：供应器（supplier）、累加器（accumulator）、组合器（combiner）和终止器（finisher）。 这些都是个啥？别慌，看上去非常复杂的样子，但好在大多数情况下，您并不需要自己去实现收集器。因为 Java 8通过Collectors类内置了各种常用的收集器，你直接拿来用就行了。
 </description>
    </item>
    
    
    
    <item>
      <title>Java Lambda 函数式编程</title>
      <link>http://haomega.github.io/posts/java-lambda-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Fri, 03 Jul 2020 15:32:15 +0800</pubDate>
      
      <guid>http://haomega.github.io/posts/java-lambda-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
      <description>函数 y=f(x) 我们称这是一个函数，x经过一系列转换变成了y
这与我们的接口很像public int compareTo(T o)，T类型参数o，经过comareTo接口调用，返回了一个int值。
在调用compareTo接口时，可以说我们调用了一个函数，它接受一个值o，返回一个int。
函数接口@FunctionalInterface Java自1.8之后引入了函数式接口，java.util.function包下Java为我们准备了一些定义好的常用函数式接口。
函数式接口的定义是：一个只包含一个抽象方法的接口类。
当一个方法参数为函数式接口时，我们可以快速的传入一个lambda表达式当作参数传入。
为什么引入 Java是一个面向对象的语言，想要调用一个方法，就必须要传入一个对象。 这对于一些简单的方法来说，调用一个接口还必须要传入一个对象，显得有些沉重。
比如一个方法接受一个接口为参数，如果你想传入的接口有不同的方法体，可能随时变化， 不使用lambda的话，每一种变体，你都要生成一个类实现该接口，然后把他当作参数传入。
这非常不灵活，如果使用lambda的话，方法可以接受一个函数作为参数，也就是说我们可以传入一个方法体进去，这样会非常灵活。
Lambda和函数式接口减少了很多不必要的代码，让我们的代码更优雅，至少看起来是的。
Usage 以Comsumer为例，该函数式接口 void accept(T t)，当参数为Comsumer时，我们可以传入(t)-&amp;gt;System.out.println(t) ，这与我们实现这个接口，并传入相比，没有什么区别。
总结 函数接口就是只包含一个抽象方法的接口，与普通接口并没有什么区别。
函数接口相当于定义了一个函数y=f(x)，它接受0个或多个参数经过f(x)变换返回了y。 Lambda表达式让我们以简便的方式定义一个函数的执行细节。</description>
    </item>
    
    
    
    <item>
      <title>Java 泛型简介</title>
      <link>http://haomega.github.io/posts/java-%E6%B3%9B%E5%9E%8B%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 03 Jul 2020 13:46:53 +0800</pubDate>
      
      <guid>http://haomega.github.io/posts/java-%E6%B3%9B%E5%9E%8B%E7%AE%80%E4%BB%8B/</guid>
      <description>Java泛型历史 Java是从Jdk1.7之后引入泛型的，现在我们已经习惯声明一个类型绑定的Collection类new ArrayList&amp;lt;String&amp;gt;();
Collection体系是从JDK1.2引入的@since 1.2
也就是说在JDK1.2之后JDK1.7之前，只能使用原始类型的Collectionnew ArrayList(),原始类型接受任何类型的元素也就是Object。
为什么要引入泛型  为了类型安全  我们使用数组的时候：new String[1]，非String类型是不能放入String数组的，在编译阶段就会报错。
然而，原始类型的Collection能存放任何元素，如果要实现类型安全，只能新建类，比如：CollectionString； 这样会导致每有一个类型你就要一次实现，比较啰嗦。
 省去不必要的类型转换操作  原始类型在进行元素读取操作时，因为存的都是Object元素，每次读取都需要进行类型转换，增加了不必要的操作。
Java如何实现泛型的 Java的泛型只是在编译阶段的泛型，泛型类经过编译后的class都是经过类型擦除的原始类型。
也就是说，我们在声明一个泛型类时，如果往其中放入一个其他类型元素，Java编译器会报错，泛型类在编译通过后， 虽然会被擦除为原始类型，但因为经过了编译器检查，我们默认里面存的元素全部都是统一的泛型。
类似的面向对象语言C++，采用的时另一种实现方式：独立出原始类型，新创建一套泛型的类，与Java相比，C++的做法更简单， 但是不方便维护；Java则是需要在编译阶段做更多的操作。
泛型的限定符 ? extends boolean addAll(Collection&amp;lt;? extends E&amp;gt; c) 限定是E或者是E的子类，一个E类型的Collection，当然E的子类也能被添加。 ? super default void sort(Comparator&amp;lt;? super E&amp;gt; c) 限定E或者E的父类实现了的Comparator，E的父类实现了Comparator接口，当然E也实现了该接口。
public static &amp;lt;T extends Comparable&amp;lt;? super T&amp;gt;&amp;gt; void sort(List&amp;lt;T&amp;gt; list) 对List进行排序，T元素限定为 &amp;lt;T extends Comparable&amp;lt;? super T&amp;gt;&amp;gt; 需要排序的T是实现了Comparable接口的任意类型, 而任意类型是类型T或者类型T的父类.，
问题   有了泛型还需要原始类型吗？ 需要，Java在编译时会进行类型擦除，泛型类最后都会变成原始类型。
  泛型类是一个新的类吗？ 是也不是，是是因为泛型类都是从同一个Class文件创建的，不是是因为泛型类并不能由一个子类接受一个父类引用。</description>
    </item>
    
    
    
    <item>
      <title>Collection体系常用类的数据结构</title>
      <link>http://haomega.github.io/posts/collection%E4%BD%93%E7%B3%BB%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 17 Jun 2020 14:54:52 +0800</pubDate>
      
      <guid>http://haomega.github.io/posts/collection%E4%BD%93%E7%B3%BB%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>Collection体系常用类 Set接口常用类  HashSet LinkedHashSet TreeSet  List接口常用类  ArrayList LinkedList Stack Vector（提供了一些线程安全的方法）  Map接口常用类  HashMap HashTable LinkedHashMap TreeMap  Set常用类数据结构 HashSet 内部维护了一个HashMapprivate transient HashMap&amp;lt;E,Object&amp;gt; map;，所有方法都是靠HashMap来完成。
LinkedHashMap 继承了HashSet，唯一与之不同的是内部维护的是LinkedHashMap而不是HashMap：
/** * Constructs a new, empty linked hash set. (This package private * constructor is only used by LinkedHashSet.)... **/ HashSet(int initialCapacity, float loadFactor, boolean dummy) { map = new LinkedHashMap&amp;lt;&amp;gt;(initialCapacity, loadFactor); } TreeSet内部也是维护了一个NavigableMap（TreeMap）。 详情请看Map。
List常用类数据结构 ArrayList内部维护了一个Object数组transient Object[] elementData;
LinkedList是链表结构，内部构造了含有前后指针的Node;
Stack extend Vector，所以内部也是一个Object数组，通过数组实现栈（先进后出），每次出栈最后一个数组元素。</description>
    </item>
    
    
    
    <item>
      <title>ArrayList源码阅读与扩容机制</title>
      <link>http://haomega.github.io/posts/arraylist%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B8%8E%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Wed, 17 Jun 2020 14:53:38 +0800</pubDate>
      
      <guid>http://haomega.github.io/posts/arraylist%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B8%8E%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/</guid>
      <description>ArrayList继承体系 implements List&amp;lt;E&amp;gt;, RandomAccess, Cloneable, java.io.Serializable 你会发现既然ArrayList继承了AbstractList（它implement List接口），为啥后面还加了个implement List&amp;lt;E&amp;gt;，网上给出的解释是：
 implement List&amp;lt;E&amp;gt; 是可以省略的，只是为了直观显示ArrayList实现了List接口，因为AbstractList只是为了减少实现List接口的代码。
 RandomAccess、Cloneable、Serializable，可随机读写、可克隆、可序列化。
Field private static final int DEFAULT_CAPACITY = 10默认容量10
private static final Object[] EMPTY_ELEMENTDATA = {} 共享的空数组
 private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {} 共享的空数组
transient Object[] elementData ArrayList元素存放的数据结构-数组
你会注意到EMPTY_ELEMENTDATA和DEFAULTCAPACITY_EMPTY_ELEMENTDATA只是两个名字不通的空数组，为啥会需要两个呢？
观察构造器public ArrayList(int initialCapacity)指定容量为0的话，ArrayList会使用EMPTY_ELEMENTDATA，
而无参构造器则会使用DEFAULTCAPACITY_EMPTY_ELEMENTDATA
这两个有什么不通呢？答案是容量增长方式不一样
private static int calculateCapacity(Object[] elementData, int minCapacity) { if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) { return Math.max(DEFAULT_CAPACITY, minCapacity); } return minCapacity; } 可以看到第二个默认容量是10，而第一个是0，表现为：</description>
    </item>
    
    
    
    <item>
      <title>Java Thread 线程简单概要</title>
      <link>http://haomega.github.io/posts/java-thread-%E7%BA%BF%E7%A8%8B%E7%AE%80%E5%8D%95%E6%A6%82%E8%A6%81/</link>
      <pubDate>Thu, 28 May 2020 23:29:39 +0800</pubDate>
      
      <guid>http://haomega.github.io/posts/java-thread-%E7%BA%BF%E7%A8%8B%E7%AE%80%E5%8D%95%E6%A6%82%E8%A6%81/</guid>
      <description>Java中的线程模型 Java是以同步/阻塞的方式运行的，他会一行一行执行。
为什么需要多线程 CPU的速度太快了，快到要等待其他操作执行，为了不让CPU的时间浪费在白白等待上就要利用多线程技术。
先来看看CPU和其他速度的差距
以我们目前常见的CPU规格为例：四核八线程核心频率2.6GHz（这里的八线程意思是超线程与本文的线程不同）
可以理解为它有四个物理大脑（由于超线程的原因，每个物理核心可以虚拟出两个逻辑核心也就是4核可以虚拟出8核）
每个核心每秒可以执行2.6 * 10^9个指令，一个指令只需要0.38ns（3.8 * 10^-10秒）；
SSD随机读取耗时大概150us（1.5 * 10^-4）
与之相比时间上相差了10^6倍！！！其他的例如硬盘寻址、文件读写、网络IO等等也都是非常耗时的操作，
由于Java是以阻塞方式运行，比如频繁的IO操作，往往时间都花费在寻址、读写数据上，CPU有很多的空闲时间，这个时候使用多线程技术可以利用CPU空闲的这段时间来干其他的事情，使程序更加高效。总结来说：多线程就是不让CPU闲下来，在有限的时间里干更多的事情
开启线程的方法 开启一个线程的时候，会增加一个独立的栈： Jvm的栈空间中除了Main的栈之外会增加一个与之互相没有关联的栈。
 使用Runnable接口,实现接口后传入Thread；  	new Thread(() -&amp;gt; { System.out.println(&amp;quot; MyThread is:&amp;quot; + Thread.currentThread().getName()); }).start();  继承Thread类，实现方法，然后通过调用start开启线程；  static class MyThread extends Thread { @Override public void run() { System.out.println(&amp;quot; MyThread is:&amp;quot; + this.getName()); } } 线程中共享哪些资源 新的线程执行的内容会在一个新的栈中运行，则只属于栈的局部变量是不可共享的，反之其他的都是共享的，比如堆中的对象。
其实除了局部变量外共享所有资源（对象、静态常量、静态方法·····等等除了局部变量外）。</description>
    </item>
    
    
    
    <item>
      <title>Java Exception简要概述</title>
      <link>http://haomega.github.io/posts/java-exception%E7%AE%80%E8%A6%81%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Thu, 28 May 2020 13:55:18 +0800</pubDate>
      
      <guid>http://haomega.github.io/posts/java-exception%E7%AE%80%E8%A6%81%E6%A6%82%E8%BF%B0/</guid>
      <description>概要 程序并不是每次都能按照理想情况运行，总是有着不可预测的异常情况发生。
作用  正确处理异常可以使程序更健壮； 异常给方法提供了除了return之外的额外的返回途径；  Java中的异常结构 Java中的异常大致分为两类：Exception和Error，他们都继承自Throwable，意思是可抛出的异常;
Exception:(checked) 往往可以通过正确处理来避免；例如NullPointorException * runtimeException：运行时异常（unchecked） Error：（unchecked） 程序无能为力的异常；例如NoSuchClassError、OutOfmemoryError
异常的处理 有两种方式来处理异常
 抛出 捕获  当你的的程序在某些情况不能正确执行：你可以抛出一个异常来警告调用者，或者捕获异常并处理。 当你的程序调用一个抛出异常的接口时： * 继续抛出这个异常 * 捕获并处理它（切记不可捕获了异常时不做任何处理） * 捕获它，doSomething并继续抛出此异常或另一个异常
异常处理原则  能用if/else或者其他能处理的，不要用异常 尽早抛出异常 带出重要信息 一旦捕获异常除非特别的，必须进行处理或者重新抛出。 ····  其他 不捕获，一直抛出会发生什么？ 异常会击穿方法，直到被捕获，如果一直到最外层都没有捕获，则会杀掉当前线程。
catch/finally里的return finally一定会被执行，所以最终return的是finally块里的，另：不要再catch里return，这是不好的做法。
日志里的caused by是什么？ 出现caused by是异常被捕获后，重新由新的异常包裹（throw new XXXException(&amp;ldquo;some things&amp;rdquo;, e)）并抛出。</description>
    </item>
    
    
    
    <item>
      <title>Collection 体系和常用类</title>
      <link>http://haomega.github.io/posts/collection-%E4%BD%93%E7%B3%BB%E5%92%8C%E5%B8%B8%E7%94%A8%E7%B1%BB/</link>
      <pubDate>Tue, 12 May 2020 17:55:28 +0800</pubDate>
      
      <guid>http://haomega.github.io/posts/collection-%E4%BD%93%E7%B3%BB%E5%92%8C%E5%B8%B8%E7%94%A8%E7%B1%BB/</guid>
      <description>Collection体系 Collection：是一组数据的集合
 Set 集 （不包含重复、无序） List 列表 （包含重复、有序) Quene 队列 （先进后出）  Collection接口 定义了基本的集合方法
 add/addAll	添加一个到集合中 remove/removeAll/removeIf	从集合中移除元素 contains/containsAll	判断集合是否包含 size	集合大小 clear	清空集合 retainAll	交集  Set 完全是Collection的实现，没有新增什么方法。
List 增加了基于Index操作的相关方法：
 get(i)/set(i)/remove 根据下标获取/设置/删除 indexOf/lastIndexOf  Quene 增加了队列的相关操作：
 poll/remove 删除头部的一个元素 peek 偷看  常用类 从Collection体系图中可以看出：
 Set：HashSet List：ArrayList Quene：  HashSet 内部维护了一个HashMap，基本上都是在间接操作里面的HashMap
ArrayList 日常用到的最多，如果没有特殊的需求，一般都会用它。 特点是内部维护了数组，查找快、增删慢（如果删除中间的元素，后面的元素还要依次进一） 内部数据结构： Object数组
Map体系 键值对映射，不属于Collection Map接口 定义了键值对操作的方法，内部还包含了Entry接口
 put/putAll 新增键值对 remove 删除 get	根据key获取value containsKey/containsValue 判断包含 clear	清空 keySet/values/entrySet	返回Map的key视图/value视图/entry视图 replace 替换  注意: Map视图是map内的真实映射，对视图操作就是对map操作</description>
    </item>
    
    
    
    <item>
      <title>Java的包管理与Maven</title>
      <link>http://haomega.github.io/posts/java%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86%E4%B8%8Emaven/</link>
      <pubDate>Mon, 11 May 2020 17:30:59 +0800</pubDate>
      
      <guid>http://haomega.github.io/posts/java%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86%E4%B8%8Emaven/</guid>
      <description>Java程序如何执行？ 在Jvm中，它只做很简单的一件事，找到这个类并执行它，如果类中引用了其他的类，则继续找到引用的这个类，继续执行。
Jvm如何找到类？ 在Jvm中，所有的类使用全限定类名，Jvm也是根据全限定类名找到这个类； 查询机制：与熟悉的Path环境变量相同，Jvm从classpath按照Path的顺序依次查找。
当我们引入第三方包时，需要怎么做？ 首先你需要有源文件（jar文件)，然后告诉Jvm去哪里可以找到它，也就是指定classpath。
Maven做了什么？ 在管理依赖的方面，Maven就是从它的仓库中通过你定义的坐标
 &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.12&amp;lt;/version&amp;gt; 找到并下载该jar。
包冲突 根据Jvm执行的机制可以知道，包冲突就是在classpath中存在全限定类名相同的类，我们想要使用的jar包的path排在了不想要的后面，导致了错误的引用。 解决方法也是围绕着能够让Jvm能够正确读取我们想要的类为前提来进行。</description>
    </item>
    
    
    
    <item>
      <title>Hugo and GithubPages 博客搭建</title>
      <link>http://haomega.github.io/posts/hugo-and-githubpages-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Mon, 11 May 2020 11:08:27 +0800</pubDate>
      
      <guid>http://haomega.github.io/posts/hugo-and-githubpages-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid>
      <description>Hugo Go语言实现的博客生成器
 The world&amp;rsquo;s fastest framework for building websites.
 在使用Hugo之前，我使用过hexo，Hugo和其相比，速度是快了不少。当然速度并不是那么重要。
Github Pages 提供了类似静态文件服务的功能，你不必去购买服务器和域名了。
搭建步骤  安装Hugo，下载地址,请下载对应系统版本； 配置Hugo环境变量，终端中执行hugo version 出现版本详情，表示环境变量配置成功； 博客初始化、安装主题、创建post，请查看官网 配置GithubPages  在Gihub上创建 username.github.io的仓库； 执行hugo -D 将会在/public生成静态博客的内容； 我们将/public内容添加remote到第一步的远程仓库，并推送到master； 在仓库的配置页面打开GithubPages；   博客源文件的备份当然，我们也会考虑到，你使用Hugo生成博客的目录可能会丢失， 所以，对当前目录做个备份吧，不仅能备份配置，也能备份生成文章的md源文件。 我的做法是将根目录推送到username.github.io仓库的hugo-source分支，与master分支互不影响。  </description>
    </item>
    
    
    
    <item>
      <title>开博大吉</title>
      <link>http://haomega.github.io/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Fri, 08 May 2020 23:03:02 +0800</pubDate>
      
      <guid>http://haomega.github.io/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      <description>Hello world. </description>
    </item>
    
    
  </channel>
</rss>
