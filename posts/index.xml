<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Haomega的博客</title>
    <link>http://haomega.github.io/posts/</link>
    <description>Recent content in Posts on Haomega的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <lastBuildDate>Mon, 11 May 2020 17:30:59 +0800</lastBuildDate>
    
	<atom:link href="http://haomega.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java的包管理与Maven</title>
      <link>http://haomega.github.io/posts/java%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86%E4%B8%8Emaven/</link>
      <pubDate>Mon, 11 May 2020 17:30:59 +0800</pubDate>
      
      <guid>http://haomega.github.io/posts/java%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86%E4%B8%8Emaven/</guid>
      <description>Java程序如何执行？ 在Jvm中，它只做很简单的一件事，找到这个类并执行它，如果类中引用了其他的类，则继续找到引用的这个类，继续执行。
Jvm如何找到类？ 在Jvm中，所有的类使用全限定类名，Jvm也是根据全限定类名找到这个类； 查询机制：与熟悉的Path环境变量相同，Jvm从classpath按照Path的顺序依次查找。
当我们引入第三方包时，需要怎么做？ 首先你需要有源文件（jar文件)，然后告诉Jvm去哪里可以找到它，也就是指定classpath。
Maven做了什么？ 在管理依赖的方面，Maven就是从它的仓库中通过你定义的坐标
 &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.12&amp;lt;/version&amp;gt; 找到并下载该jar。
包冲突 根据Jvm执行的机制可以知道，包冲突就是在classpath中存在全限定类名相同的类，我们想要使用的jar包的path排在了不想要的后面，导致了错误的引用。 解决方法也是围绕着能够让Jvm能够正确读取我们想要的类为前提来进行。</description>
    </item>
    
    <item>
      <title>Hugo and GithubPages 博客搭建</title>
      <link>http://haomega.github.io/posts/hugo-and-githubpages-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Mon, 11 May 2020 11:08:27 +0800</pubDate>
      
      <guid>http://haomega.github.io/posts/hugo-and-githubpages-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid>
      <description>Hugo Go语言实现的博客生成器
 The world&amp;rsquo;s fastest framework for building websites.
 在使用Hugo之前，我使用过hexo，Hugo和其相比，速度是快了不少。当然速度并不是那么重要。
Github Pages 提供了类似静态文件服务的功能，你不必去购买服务器和域名了。
搭建步骤  安装Hugo，下载地址,请下载对应系统版本； 配置Hugo环境变量，终端中执行hugo version 出现版本详情，表示环境变量配置成功； 博客初始化、安装主题、创建post，请查看官网 配置GithubPages  在Gihub上创建 username.github.io的仓库； 执行hugo -D 将会在/public生成静态博客的内容； 我们将/public内容添加remote到第一步的远程仓库，并推送到master； 在仓库的配置页面打开GithubPages；   博客源文件的备份当然，我们也会考虑到，你使用Hugo生成博客的目录可能会丢失， 所以，对当前目录做个备份吧，不仅能备份配置，也能备份生成文章的md源文件。 我的做法是将根目录推送到username.github.io仓库的hugo-source分支，与master分支互不影响。  </description>
    </item>
    
    <item>
      <title>开博大吉</title>
      <link>http://haomega.github.io/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Fri, 08 May 2020 23:03:02 +0800</pubDate>
      
      <guid>http://haomega.github.io/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      <description>Hello world. </description>
    </item>
    
  </channel>
</rss>